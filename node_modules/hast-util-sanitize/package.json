{
  "_args": [
    [
      {
        "raw": "hast-util-sanitize@^1.0.0",
        "scope": null,
        "escapedName": "hast-util-sanitize",
        "name": "hast-util-sanitize",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/enys/Desktop/dice/node_modules/remark-html"
    ]
  ],
  "_from": "hast-util-sanitize@>=1.0.0 <2.0.0",
  "_id": "hast-util-sanitize@1.1.0",
  "_inCache": true,
  "_location": "/hast-util-sanitize",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/hast-util-sanitize-1.1.0.tgz_1474116429669_0.45737188239581883"
  },
  "_npmUser": {
    "name": "wooorm",
    "email": "tituswormer@gmail.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hast-util-sanitize@^1.0.0",
    "scope": null,
    "escapedName": "hast-util-sanitize",
    "name": "hast-util-sanitize",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/remark-html"
  ],
  "_resolved": "https://registry.npmjs.org/hast-util-sanitize/-/hast-util-sanitize-1.1.0.tgz",
  "_shasum": "9b4bc3731043fe92e1253a9a4ca7bcc4148d06f2",
  "_shrinkwrap": null,
  "_spec": "hast-util-sanitize@^1.0.0",
  "_where": "/Users/enys/Desktop/dice/node_modules/remark-html",
  "author": {
    "name": "Titus Wormer",
    "email": "tituswormer@gmail.com",
    "url": "http://wooorm.com"
  },
  "bugs": {
    "url": "https://github.com/wooorm/hast-util-sanitize/issues"
  },
  "contributors": [
    {
      "name": "Titus Wormer",
      "email": "tituswormer@gmail.com",
      "url": "http://wooorm.com"
    }
  ],
  "dependencies": {
    "has": "^1.0.1",
    "xtend": "^4.0.1"
  },
  "description": "Sanitize HAST nodes",
  "devDependencies": {
    "browserify": "^13.0.1",
    "deepmerge": "^0.2.10",
    "esmangle": "^1.0.1",
    "hast-util-to-html": "^2.1.0",
    "hastscript": "^3.0.0",
    "nyc": "^8.3.0",
    "remark-cli": "^2.0.0",
    "remark-preset-wooorm": "^1.0.0",
    "tape": "^4.0.0",
    "unist-builder": "^1.0.1",
    "xo": "^0.16.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9b4bc3731043fe92e1253a9a4ca7bcc4148d06f2",
    "tarball": "https://registry.npmjs.org/hast-util-sanitize/-/hast-util-sanitize-1.1.0.tgz"
  },
  "files": [
    "lib",
    "index.js"
  ],
  "gitHead": "e7813aaba23d9caaf21f2ce564c5a48fd4945020",
  "homepage": "https://github.com/wooorm/hast-util-sanitize#readme",
  "keywords": [
    "hast",
    "util",
    "sanitize"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "wooorm",
      "email": "tituswormer@gmail.com"
    }
  ],
  "name": "hast-util-sanitize",
  "nyc": {
    "check-coverage": true,
    "lines": 100,
    "functions": 100,
    "branches": 100
  },
  "optionalDependencies": {},
  "readme": "# hast-util-sanitize [![Build Status][travis-badge]][travis] [![Coverage Status][codecov-badge]][codecov]\n\n<!--lint disable heading-increment list-item-spacing-->\n\nSanitize [HAST][].\n\n## Installation\n\n[npm][npm-install]:\n\n```bash\nnpm install hast-util-sanitize\n```\n\n## Usage\n\nDependencies:\n\n```javascript\nvar h = require('hastscript');\nvar u = require('unist-builder');\nvar sanitize = require('hast-util-sanitize');\nvar toHTML = require('hast-util-to-html');\n```\n\nTransform:\n\n```javascript\nvar tree = h('div', {\n  onmouseover: 'alert(\"alpha\")'\n}, [\n  h('a', {\n    href: 'jAva script:alert(\"bravo\")',\n    onclick: 'alert(\"charlie\")'\n  }, 'delta'),\n  u('text', '\\n'),\n  h('script', 'alert(\"charlie\")'),\n  u('text', '\\n'),\n  h('img', {src: 'x', onerror: 'alert(\"delta\")'}),\n  u('text', '\\n'),\n  h('iframe', {src: 'javascript:alert(\"echo\")'}),\n  u('text', '\\n'),\n  h('math', h('mi', {\n    'xlink:href': 'data:x,<script>alert(\"foxtrot\")</script>'\n  }))\n]);\n```\n\nCompile:\n\n```javascript\nvar unsanitized = toHTML(tree);\nvar sanitized = toHTML(sanitize(tree));\n```\n\nUnsanitized:\n\n```html\n<div onmouseover=\"alert(&#x22;alpha&#x22;)\"><a href=\"jAva script:alert(&#x22;bravo&#x22;)\" onclick=\"alert(&#x22;charlie&#x22;)\">delta</a>\n<script>alert(\"charlie\")</script>\n<img src=\"x\" onerror=\"alert(&#x22;delta&#x22;)\">\n<iframe src=\"javascript:alert(&#x22;echo&#x22;)\"></iframe>\n<math><mi xlink:href=\"data:x,&#x3C;script&#x3E;alert(&#x22;foxtrot&#x22;)&#x3C;/script&#x3E;\"></mi></math></div>\n```\n\nSanitized:\n\n```html\n<div><a>delta</a>\n\n<img src=\"x\">\n\n</div>\n```\n\n## API\n\n### `sanitize(node[, schema])`\n\nSanitize the given [HAST][] tree.\n\n###### Parameters\n\n*   `node` ([`HASTNode`][hast]).\n*   `schema` ([`Schema`][schema], optional).\n\n###### Returns\n\n[`HASTNode`][hast] — A new node.\n\n### `Schema`\n\nConfiguration.  If not given, defaults to [GitHub][] style sanitation.\nIf any top-level key isn’t given, it defaults to GH’s style too.\n\nFor a thorough sample, see the packages [`github.json`][schema-github].\n\nTo extend the standard schema with a few changes, clone `github.json`\nlike so:\n\n```js\nvar h = require('hastscript');\nvar merge = require('deepmerge');\nvar gh = require('hast-util-sanitize/lib/github');\n\nvar schema = merge(gh, {attributes: {'*': ['className']}});\n\nvar tree = sanitize(h('div', {className: ['foo']}));\n// `tree` still has `className`.\n```\n\n###### `attributes`\n\nMap of tag-names to allowed attributes (`Object.<Array.<string>>`).\n\nThe special `'*'` key sets attributes allowed on all elements.\n\nOne special value, namely `'data*'`, can be used to allow all `data`\nproperties.\n\n```js\n\"attributes\": {\n  \"a\": [\n    \"href\"\n  ],\n  \"img\": [\n    \"src\",\n    \"longDesc\"\n  ],\n  // ...\n  \"*\": [\n    \"abbr\",\n    \"accept\",\n    \"acceptCharset\",\n    // ...\n    \"vspace\",\n    \"width\",\n    \"itemProp\"\n  ]\n}\n```\n\n###### `tagNames`\n\nList of allowed tag-names (`Array.<string>`).\n\n```js\n\"tagNames\": [\n  \"h1\",\n  \"h2\",\n  \"h3\",\n  // ...\n  \"strike\",\n  \"summary\",\n  \"details\"\n]\n```\n\n###### `protocols`\n\nMap of protocols to support for attributes (`Object.<Array.<string>>`).\n\n```js\n\"protocols\": {\n  \"href\": [\n    \"http\",\n    \"https\",\n    \"mailto\"\n  ],\n  // ...\n  \"longDesc\": [\n    \"http\",\n    \"https\"\n  ]\n}\n```\n\n###### `ancestors`\n\nMap of tag-names to their required ancestral elements\n(`Object.<Array.<string>>`).\n\n```js\n\"ancestors\": {\n  \"li\": [\n    \"ol\",\n    \"ul\"\n  ],\n  // ...\n  \"tr\": [\n    \"table\"\n  ]\n}\n```\n\n###### `clobber`\n\nList of allowed attribute-names which can clobber (`Array.<string>`).\n\n```js\n\"clobber\": [\n  \"name\",\n  \"id\"\n]\n```\n\n###### `clobberPrefix`\n\nPrefix (`string`) to use before potentially clobbering properties.\n\n```js\n\"clobberPrefix\": \"user-content\"\n```\n\n###### `strip`\n\nTag-names to strip from the tree (`Array.<string>`).\n\nBy default, unsafe elements are replaced by their content.  Some elements,\nshould however be entirely stripped from the tree.\n\n```js\n\"strip\": [\n  \"script\"\n]\n```\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n<!-- Definitions -->\n\n[travis-badge]: https://img.shields.io/travis/wooorm/hast-util-sanitize.svg\n\n[travis]: https://travis-ci.org/wooorm/hast-util-sanitize\n\n[codecov-badge]: https://img.shields.io/codecov/c/github/wooorm/hast-util-sanitize.svg\n\n[codecov]: https://codecov.io/github/wooorm/hast-util-sanitize\n\n[npm-install]: https://docs.npmjs.com/cli/install\n\n[license]: LICENSE\n\n[author]: http://wooorm.com\n\n[hast]: https://github.com/wooorm/hast\n\n[schema]: #schema\n\n[github]: https://github.com/jch/html-pipeline/blob/master/lib/html/pipeline/sanitization_filter.rb\n\n[schema-github]: https://github.com/wooorm/hast-util-sanitize/blob/master/lib/github.json\n",
  "readmeFilename": "readme.md",
  "remarkConfig": {
    "output": true,
    "presets": "wooorm"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wooorm/hast-util-sanitize.git"
  },
  "scripts": {
    "build": "npm run build-md && npm run build-bundle && npm run build-mangle",
    "build-bundle": "browserify index.js --bare -s hastUtilSanitize > hast-util-sanitize.js",
    "build-mangle": "esmangle hast-util-sanitize.js > hast-util-sanitize.min.js",
    "build-md": "remark . --quiet --frail",
    "lint": "xo",
    "test": "npm run build && npm run lint && npm run test-coverage",
    "test-api": "node test.js",
    "test-coverage": "nyc --reporter lcov tape test.js"
  },
  "version": "1.1.0",
  "xo": {
    "space": true,
    "rules": {
      "no-negated-condition": "off",
      "guard-for-in": "off",
      "no-eq-null": "off",
      "eqeqeq": [
        2,
        "allow-null"
      ],
      "max-lines": "off"
    },
    "ignores": [
      "hast-util-sanitize.js"
    ]
  }
}
